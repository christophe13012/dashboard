{"version":3,"sources":["views/extras/Extras.js"],"names":["GRAPHQL_ENDPOINT","GRAPHQL_SUBSCRIPTIONS","SECRET_KEY","AUTH_JWT","db","getDatabase","Extras","mode","setMode","useState","extras24","setExtras24","extras24Cat","setExtras24Cat","extras24Job","setExtras24Job","extras24Dep","setExtras24Dep","extrasSemaine","setExtrasSemaine","extrasSemaineCat","setExtrasSemaineCat","extrasSemaineJob","setExtrasSemaineJob","extrasSemaineDep","setExtrasSemaineDep","extrasMois","setExtrasMois","extrasMoisCat","setExtrasMoisCat","extrasMoisJob","setExtrasMoisJob","extrasMoisDep","setExtrasMoisDep","extrasAll","setExtrasAll","extrasAllCat","setExtrasAllCat","extrasAllJob","setExtrasAllJob","extrasAllDep","setExtrasAllDep","loading","setLoading","useEffect","client","createApolloClient","async","extrasData","query","gql","data","extra","objExtras","forEach","element","id","job","then","result","usersInWork","user","console","log","today","Date","yesterday","setDate","getDate","oneWeekAgo","oneMonthAgo","usersListRef","ref","onValue","snapshot","val","firebase24","filter","x","metadata","creationTime","getTime","firebaseSemaine","firebaseMois","firebaseAll","firebaseUsers24","map","uid","usersInWork24","includes","company","firebaseUsersSemaine","usersInWorkSemaine","firebaseUsersMois","usersInWorkMois","firebaseUsersAll","usersInWorkAll","idExtra","groupByCategory24","reduce","group","product","category","push","groupBydep24","postalCode","dep","toString","substring","departement","groupBydepSemaine","groupBydepMois","groupBydepAll","groupByCategorySemaine","groupByCategoryMois","groupByCategoryAll","groupByJob24","groupByJobSemaine","groupByJobMois","groupByJobAll","setTimeout","fetchData","httpLink","HttpLink","uri","headers","Authorization","wsLink","WebSocketLink","options","reconnect","splitLink","split","definition","getMainDefinition","kind","operation","ApolloClient","link","cache","InMemoryCache","className","xs","height","width","color","ariaLabel","variant","onClick","active","style","cursor","length","labels","Object","keys","datasets","backgroundColor","values"],"mappings":"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","file":"static/js/34.bf571e11.chunk.js","sourcesContent":["import React, { lazy, useEffect, useState } from 'react'\nimport { ApolloClient, InMemoryCache, HttpLink, split, gql } from '@apollo/client'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { WebSocketLink } from '@apollo/client/link/ws'\nimport { TailSpin } from 'react-loader-spinner'\n\nimport { CNav, CNavItem, CNavLink, CCol, CCard, CCardHeader, CCardBody, CRow } from '@coreui/react'\nimport { CChartDoughnut } from '@coreui/react-chartjs'\n\nimport { getDatabase, ref, onValue } from 'firebase/database'\nimport { departement } from 'src/utils/utils.js'\n\nexport const GRAPHQL_ENDPOINT = 'https://unextra.hasura.app/v1/graphql'\nexport const GRAPHQL_SUBSCRIPTIONS = 'wss://unextra.hasura.app/v1/graphql'\nexport const SECRET_KEY = '2tGF4WeLMIOsP/Q/h/VS2cd++EmJzMcb'\nexport const AUTH_JWT =\n  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiYW5vbnltb3VzIl0sIngtaGFzdXJhLWRlZmF1bHQtcm9sZSI6ImFub255bW91cyJ9fQ.HM2vL95bDWL2xTMwCXXDatxlfLMd_8-Mx1ymyMiCKb4'\n\nconst db = getDatabase()\n\nconst WidgetsDropdown = lazy(() => import('../widgets/WidgetsDropdown.js'))\nconst WidgetsBrand = lazy(() => import('../widgets/WidgetsBrand.js'))\n\nconst Extras = () => {\n  const [mode, setMode] = useState(0)\n  const [extras24, setExtras24] = useState([])\n  const [extras24Cat, setExtras24Cat] = useState([])\n  const [extras24Job, setExtras24Job] = useState([])\n  const [extras24Dep, setExtras24Dep] = useState([])\n  const [extrasSemaine, setExtrasSemaine] = useState([])\n  const [extrasSemaineCat, setExtrasSemaineCat] = useState([])\n  const [extrasSemaineJob, setExtrasSemaineJob] = useState([])\n  const [extrasSemaineDep, setExtrasSemaineDep] = useState([])\n  const [extrasMois, setExtrasMois] = useState([])\n  const [extrasMoisCat, setExtrasMoisCat] = useState([])\n  const [extrasMoisJob, setExtrasMoisJob] = useState([])\n  const [extrasMoisDep, setExtrasMoisDep] = useState([])\n  const [extrasAll, setExtrasAll] = useState([])\n  const [extrasAllCat, setExtrasAllCat] = useState([])\n  const [extrasAllJob, setExtrasAllJob] = useState([])\n  const [extrasAllDep, setExtrasAllDep] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const client = createApolloClient()\n    async function fetchData() {\n      const extras = await client.query({\n        query: gql`\n          query {\n            extra(limit: 100000) {\n              id\n              job\n            }\n          }\n        `,\n      })\n\n      const extrasData = extras.data.extra\n\n      const objExtras = {}\n\n      extrasData.forEach((element) => {\n        objExtras[element.id] = element.job\n      })\n\n      client\n        .query({\n          query: gql`\n            query {\n              user(limit: 100000) {\n                id\n                idExtra\n                category\n                gender\n                postalCode\n                company {\n                  id\n                  latitude\n                }\n              }\n            }\n          `,\n        })\n        .then((result) => {\n          const usersInWork = result.data.user\n          console.log('usersInWork', usersInWork)\n\n          const today = new Date()\n          const yesterday = new Date()\n          yesterday.setDate(yesterday.getDate() - 1)\n          const oneWeekAgo = new Date()\n          const oneMonthAgo = new Date()\n          oneWeekAgo.setDate(oneWeekAgo.getDate() - 8)\n          oneMonthAgo.setDate(oneMonthAgo.getDate() - 31)\n          const usersListRef = ref(db, 'usersList')\n          onValue(usersListRef, (snapshot) => {\n            const data = snapshot.val()\n            const firebase24 = data.filter((x) => {\n              return new Date(x.metadata.creationTime).getTime() > yesterday.getTime()\n            })\n            const firebaseSemaine = data.filter((x) => {\n              return (\n                new Date(x.metadata.creationTime).getTime() < today.getTime() &&\n                new Date(x.metadata.creationTime).getTime() > oneWeekAgo.getTime()\n              )\n            })\n            const firebaseMois = data.filter((x) => {\n              return (\n                new Date(x.metadata.creationTime).getTime() < today.getTime() &&\n                new Date(x.metadata.creationTime).getTime() > oneMonthAgo.getTime()\n              )\n            })\n            const firebaseAll = data.filter((x) => {\n              return new Date(x.metadata.creationTime).getTime() < today.getTime()\n            })\n            const firebaseUsers24 = firebase24.map((x) => x.uid)\n            let usersInWork24 = usersInWork.filter((x) => {\n              return firebaseUsers24.includes(x.id) && x.company == null\n            })\n            const firebaseUsersSemaine = firebaseSemaine.map((x) => x.uid)\n            let usersInWorkSemaine = usersInWork.filter((x) => {\n              return firebaseUsersSemaine.includes(x.id) && x.company == null\n            })\n            const firebaseUsersMois = firebaseMois.map((x) => x.uid)\n            let usersInWorkMois = usersInWork.filter((x) => {\n              return firebaseUsersMois.includes(x.id) && x.company == null\n            })\n            const firebaseUsersAll = firebaseAll.map((x) => x.uid)\n            let usersInWorkAll = usersInWork.filter((x) => {\n              return firebaseUsersAll.includes(x.id) && x.company == null\n            })\n            usersInWork24 = usersInWork24.map((x) => ({ ...x, job: objExtras[x.idExtra] }))\n            usersInWorkSemaine = usersInWorkSemaine.map((x) => ({\n              ...x,\n              job: objExtras[x.idExtra],\n            }))\n            usersInWorkMois = usersInWorkMois.map((x) => ({\n              ...x,\n              job: objExtras[x.idExtra],\n            }))\n            usersInWorkAll = usersInWorkAll.map((x) => ({\n              ...x,\n              job: objExtras[x.idExtra],\n            }))\n            setExtras24(usersInWork24)\n            setExtrasSemaine(usersInWorkSemaine)\n            setExtrasMois(usersInWorkMois)\n            setExtrasAll(usersInWorkAll)\n            const groupByCategory24 = usersInWork24.reduce((group, product) => {\n              const { category } = product\n              group[category] = group[category] ?? []\n              group[category].push(product)\n              return group\n            }, {})\n            const groupBydep24 = usersInWork24.reduce((group, product) => {\n              const { postalCode } = product\n              const dep = postalCode ? postalCode.toString().substring(0, 2) : 'nc'\n              group[departement[dep]] = group[departement[dep]] ?? []\n              group[departement[dep]].push(product)\n              return group\n            }, {})\n            const groupBydepSemaine = usersInWorkSemaine.reduce((group, product) => {\n              const { postalCode } = product\n              const dep = postalCode ? postalCode.toString().substring(0, 2) : 'nc'\n              group[departement[dep]] = group[departement[dep]] ?? []\n              group[departement[dep]].push(product)\n              return group\n            }, {})\n\n            const groupBydepMois = usersInWorkMois.reduce((group, product) => {\n              const { postalCode } = product\n              const dep = postalCode ? postalCode.toString().substring(0, 2) : 'nc'\n              group[departement[dep]] = group[departement[dep]] ?? []\n              group[departement[dep]].push(product)\n              return group\n            }, {})\n\n            const groupBydepAll = usersInWorkAll.reduce((group, product) => {\n              const { postalCode } = product\n              const dep = postalCode ? postalCode.toString().substring(0, 2) : 'nc'\n              group[departement[dep]] = group[departement[dep]] ?? []\n              group[departement[dep]].push(product)\n              return group\n            }, {})\n\n            const groupByCategorySemaine = usersInWorkSemaine.reduce((group, product) => {\n              const { category } = product\n              group[category] = group[category] ?? []\n              group[category].push(product)\n              return group\n            }, {})\n            const groupByCategoryMois = usersInWorkMois.reduce((group, product) => {\n              const { category } = product\n              group[category] = group[category] ?? []\n              group[category].push(product)\n              return group\n            }, {})\n            const groupByCategoryAll = usersInWorkAll.reduce((group, product) => {\n              const { category } = product\n              group[category] = group[category] ?? []\n              group[category].push(product)\n              return group\n            }, {})\n            const groupByJob24 = usersInWork24.reduce((group, product) => {\n              const { job } = product\n              group[job] = group[job] ?? []\n              group[job].push(product)\n              return group\n            }, {})\n            const groupByJobSemaine = usersInWorkSemaine.reduce((group, product) => {\n              const { job } = product\n              group[job] = group[job] ?? []\n              group[job].push(product)\n              return group\n            }, {})\n            const groupByJobMois = usersInWorkMois.reduce((group, product) => {\n              const { job } = product\n              group[job] = group[job] ?? []\n              group[job].push(product)\n              return group\n            }, {})\n            const groupByJobAll = usersInWorkAll.reduce((group, product) => {\n              const { job } = product\n              group[job] = group[job] ?? []\n              group[job].push(product)\n              return group\n            }, {})\n            setExtras24Job(groupByJob24)\n            setExtras24Cat(groupByCategory24)\n            setExtras24Dep(groupBydep24)\n            setExtrasSemaineJob(groupByJobSemaine)\n            setExtrasSemaineCat(groupByCategorySemaine)\n            setExtrasSemaineDep(groupBydepSemaine)\n            setExtrasMoisJob(groupByJobMois)\n            setExtrasMoisCat(groupByCategoryMois)\n            setExtrasMoisDep(groupBydepMois)\n            setExtrasAllJob(groupByJobAll)\n            setExtrasAllCat(groupByCategoryAll)\n            setExtrasAllDep(groupBydepAll)\n          })\n        })\n      setTimeout(() => {\n        setLoading(false)\n      }, 1000)\n    }\n    fetchData()\n  }, [])\n  const random = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n  }\n\n  const createApolloClient = () => {\n    const httpLink = new HttpLink({\n      uri: GRAPHQL_ENDPOINT,\n      headers: {\n        Authorization: `Bearer ${AUTH_JWT}`,\n      },\n    })\n\n    const wsLink = new WebSocketLink({\n      uri: GRAPHQL_SUBSCRIPTIONS,\n      headers: {\n        Authorization: `Bearer ${AUTH_JWT}`,\n      },\n      options: {\n        reconnect: true,\n      },\n    })\n\n    const splitLink = split(\n      ({ query }) => {\n        const definition = getMainDefinition(query)\n        return definition.kind === 'OperationDefinition' && definition.operation === 'subscription'\n      },\n      wsLink,\n      httpLink,\n    )\n\n    return new ApolloClient({\n      link: splitLink,\n      cache: new InMemoryCache(),\n    })\n  }\n\n  return loading ? (\n    <CRow className=\"justify-content-center\">\n      <CCol className=\"p-4\" xs={6}>\n        <TailSpin height=\"100\" width=\"100\" color=\"grey\" ariaLabel=\"loading\" />\n      </CCol>\n    </CRow>\n  ) : (\n    <>\n      <CNav variant=\"tabs\">\n        <CNavItem>\n          <CNavLink\n            onClick={() => setMode(0)}\n            active={mode == 0 ? true : false}\n            style={{ cursor: 'pointer', color: mode == 0 ? '#2500D2' : 'black' }}\n          >\n            Dernieres 24h\n          </CNavLink>\n        </CNavItem>\n        <CNavItem>\n          <CNavLink\n            onClick={() => setMode(1)}\n            active={mode == 1 ? true : false}\n            style={{ cursor: 'pointer', color: mode == 1 ? '#2500D2' : 'black' }}\n          >\n            Semaine\n          </CNavLink>\n        </CNavItem>\n        <CNavItem>\n          <CNavLink\n            onClick={() => setMode(2)}\n            active={mode == 2 ? true : false}\n            style={{ cursor: 'pointer', color: mode == 2 ? '#2500D2' : 'black' }}\n          >\n            Mois\n          </CNavLink>\n        </CNavItem>\n        <CNavItem>\n          <CNavLink\n            onClick={() => setMode(3)}\n            active={mode == 3 ? true : false}\n            style={{ cursor: 'pointer', color: mode == 3 ? '#2500D2' : 'black' }}\n          >\n            Total\n          </CNavLink>\n        </CNavItem>\n      </CNav>\n      {mode == 0 && (\n        <>\n          <CRow>\n            <CCol xs={6}>\n              <div className=\"mt-4\">Nombre extras inscrits : {extras24.length}</div>\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol xs={6}>\n              <CCard className=\"mb-4 mt-4\">\n                <CCardHeader>Extras inscrits par catégorie</CCardHeader>\n                <CCardBody>\n                  <CChartDoughnut\n                    data={{\n                      labels: Object.keys(extras24Cat),\n                      datasets: [\n                        {\n                          backgroundColor: [\n                            '#41B883',\n                            '#E46651',\n                            '#00D8FF',\n                            '#DD1B16',\n                            '#FF0000',\n                            '#800000',\n                            '#808000',\n                            '#00FF00',\n                            '#008000',\n                            '#808080',\n                            '#0000FF',\n                            '#000080',\n                            '#FF00FF',\n                            '#800080',\n                          ],\n                          data: Object.values(extras24Cat).map((x) => x.length),\n                        },\n                      ],\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n            </CCol>\n            <CCol xs={6}>\n              <CCard className=\"mb-4 mt-4\">\n                <CCardHeader>Extras inscrits par job</CCardHeader>\n                <CCardBody>\n                  <CChartDoughnut\n                    data={{\n                      labels: Object.keys(extras24Job),\n                      datasets: [\n                        {\n                          backgroundColor: [\n                            '#41B883',\n                            '#E46651',\n                            '#00D8FF',\n                            '#DD1B16',\n                            '#FF0000',\n                            '#800000',\n                            '#808000',\n                            '#00FF00',\n                            '#008000',\n                            '#808080',\n                            '#0000FF',\n                            '#000080',\n                            '#FF00FF',\n                            '#800080',\n                          ],\n                          data: Object.values(extras24Job).map((x) => x.length),\n                        },\n                      ],\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol xs={6}>\n              <CCard className=\"mb-4 mt-4\">\n                <CCardHeader>Extras inscrits par Département</CCardHeader>\n                <CCardBody>\n                  <CChartDoughnut\n                    data={{\n                      labels: Object.keys(extras24Dep),\n                      datasets: [\n                        {\n                          backgroundColor: [\n                            '#41B883',\n                            '#E46651',\n                            '#00D8FF',\n                            '#DD1B16',\n                            '#FF0000',\n                            '#800000',\n                            '#808000',\n                            '#00FF00',\n                            '#008000',\n                            '#808080',\n                            '#0000FF',\n                            '#000080',\n                            '#FF00FF',\n                            '#800080',\n                          ],\n                          data: Object.values(extras24Dep).map((x) => x.length),\n                        },\n                      ],\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n            </CCol>\n          </CRow>\n        </>\n      )}\n      {mode == 1 && (\n        <>\n          <CRow>\n            <CCol xs={6}>\n              <div className=\"mt-4\">Nombre extras inscrits : {extrasSemaine.length}</div>\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol xs={6}>\n              <CCard className=\"mb-4 mt-4\">\n                <CCardHeader>Extras inscrits par catégorie</CCardHeader>\n                <CCardBody>\n                  <CChartDoughnut\n                    data={{\n                      labels: Object.keys(extrasSemaineCat),\n                      datasets: [\n                        {\n                          backgroundColor: [\n                            '#41B883',\n                            '#E46651',\n                            '#00D8FF',\n                            '#DD1B16',\n                            '#FF0000',\n                            '#800000',\n                            '#808000',\n                            '#00FF00',\n                            '#008000',\n                            '#808080',\n                            '#0000FF',\n                            '#000080',\n                            '#FF00FF',\n                            '#800080',\n                          ],\n                          data: Object.values(extrasSemaineCat).map((x) => x.length),\n                        },\n                      ],\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n            </CCol>\n            <CCol xs={6}>\n              <CCard className=\"mb-4 mt-4\">\n                <CCardHeader>Extras inscrits par job</CCardHeader>\n                <CCardBody>\n                  <CChartDoughnut\n                    data={{\n                      labels: Object.keys(extrasSemaineJob),\n                      datasets: [\n                        {\n                          backgroundColor: [\n                            '#41B883',\n                            '#E46651',\n                            '#00D8FF',\n                            '#DD1B16',\n                            '#FF0000',\n                            '#800000',\n                            '#808000',\n                            '#00FF00',\n                            '#008000',\n                            '#808080',\n                            '#0000FF',\n                            '#000080',\n                            '#FF00FF',\n                            '#800080',\n                          ],\n                          data: Object.values(extrasSemaineJob).map((x) => x.length),\n                        },\n                      ],\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol xs={6}>\n              <CCard className=\"mb-4 mt-4\">\n                <CCardHeader>Extras inscrits par Département</CCardHeader>\n                <CCardBody>\n                  <CChartDoughnut\n                    data={{\n                      labels: Object.keys(extrasSemaineDep),\n                      datasets: [\n                        {\n                          backgroundColor: [\n                            '#41B883',\n                            '#E46651',\n                            '#00D8FF',\n                            '#DD1B16',\n                            '#FF0000',\n                            '#800000',\n                            '#808000',\n                            '#00FF00',\n                            '#008000',\n                            '#808080',\n                            '#0000FF',\n                            '#000080',\n                            '#FF00FF',\n                            '#800080',\n                          ],\n                          data: Object.values(extrasSemaineDep).map((x) => x.length),\n                        },\n                      ],\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n            </CCol>\n          </CRow>\n        </>\n      )}\n      {mode == 2 && (\n        <>\n          <CRow>\n            <CCol xs={6}>\n              <div className=\"mt-4\">Nombre extras inscrits : {extrasMois.length}</div>\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol xs={6}>\n              <CCard className=\"mb-4 mt-4\">\n                <CCardHeader>Extras inscrits par catégorie</CCardHeader>\n                <CCardBody>\n                  <CChartDoughnut\n                    data={{\n                      labels: Object.keys(extrasMoisCat),\n                      datasets: [\n                        {\n                          backgroundColor: [\n                            '#41B883',\n                            '#E46651',\n                            '#00D8FF',\n                            '#DD1B16',\n                            '#FF0000',\n                            '#800000',\n                            '#808000',\n                            '#00FF00',\n                            '#008000',\n                            '#808080',\n                            '#0000FF',\n                            '#000080',\n                            '#FF00FF',\n                            '#800080',\n                          ],\n                          data: Object.values(extrasMoisCat).map((x) => x.length),\n                        },\n                      ],\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n            </CCol>\n            <CCol xs={6}>\n              <CCard className=\"mb-4 mt-4\">\n                <CCardHeader>Extras inscrits par job</CCardHeader>\n                <CCardBody>\n                  <CChartDoughnut\n                    data={{\n                      labels: Object.keys(extrasMoisJob),\n                      datasets: [\n                        {\n                          backgroundColor: [\n                            '#41B883',\n                            '#E46651',\n                            '#00D8FF',\n                            '#DD1B16',\n                            '#FF0000',\n                            '#800000',\n                            '#808000',\n                            '#00FF00',\n                            '#008000',\n                            '#808080',\n                            '#0000FF',\n                            '#000080',\n                            '#FF00FF',\n                            '#800080',\n                          ],\n                          data: Object.values(extrasMoisJob).map((x) => x.length),\n                        },\n                      ],\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol xs={6}>\n              <CCard className=\"mb-4 mt-4\">\n                <CCardHeader>Extras inscrits par Département</CCardHeader>\n                <CCardBody>\n                  <CChartDoughnut\n                    data={{\n                      labels: Object.keys(extrasMoisDep),\n                      datasets: [\n                        {\n                          backgroundColor: [\n                            '#41B883',\n                            '#E46651',\n                            '#00D8FF',\n                            '#DD1B16',\n                            '#FF0000',\n                            '#800000',\n                            '#808000',\n                            '#00FF00',\n                            '#008000',\n                            '#808080',\n                            '#0000FF',\n                            '#000080',\n                            '#FF00FF',\n                            '#800080',\n                          ],\n                          data: Object.values(extrasMoisDep).map((x) => x.length),\n                        },\n                      ],\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n            </CCol>\n          </CRow>\n        </>\n      )}\n      {mode == 3 && (\n        <>\n          <CRow>\n            <CCol xs={6}>\n              <div className=\"mt-4\">Nombre extras inscrits : {extrasAll.length}</div>\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol xs={6}>\n              <CCard className=\"mb-4 mt-4\">\n                <CCardHeader>Extras inscrits par catégorie</CCardHeader>\n                <CCardBody>\n                  <CChartDoughnut\n                    data={{\n                      labels: Object.keys(extrasAllCat),\n                      datasets: [\n                        {\n                          backgroundColor: [\n                            '#41B883',\n                            '#E46651',\n                            '#00D8FF',\n                            '#DD1B16',\n                            '#FF0000',\n                            '#800000',\n                            '#808000',\n                            '#00FF00',\n                            '#008000',\n                            '#808080',\n                            '#0000FF',\n                            '#000080',\n                            '#FF00FF',\n                            '#800080',\n                          ],\n                          data: Object.values(extrasAllCat).map((x) => x.length),\n                        },\n                      ],\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n            </CCol>\n            <CCol xs={6}>\n              <CCard className=\"mb-4 mt-4\">\n                <CCardHeader>Extras inscrits par job</CCardHeader>\n                <CCardBody>\n                  <CChartDoughnut\n                    data={{\n                      labels: Object.keys(extrasAllJob),\n                      datasets: [\n                        {\n                          backgroundColor: [\n                            '#41B883',\n                            '#E46651',\n                            '#00D8FF',\n                            '#DD1B16',\n                            '#FF0000',\n                            '#800000',\n                            '#808000',\n                            '#00FF00',\n                            '#008000',\n                            '#808080',\n                            '#0000FF',\n                            '#000080',\n                            '#FF00FF',\n                            '#800080',\n                          ],\n                          data: Object.values(extrasAllJob).map((x) => x.length),\n                        },\n                      ],\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol xs={6}>\n              <CCard className=\"mb-4 mt-4\">\n                <CCardHeader>Extras inscrits par Département</CCardHeader>\n                <CCardBody>\n                  <CChartDoughnut\n                    data={{\n                      labels: Object.keys(extrasAllDep),\n                      datasets: [\n                        {\n                          backgroundColor: [\n                            '#41B883',\n                            '#E46651',\n                            '#00D8FF',\n                            '#DD1B16',\n                            '#FF0000',\n                            '#800000',\n                            '#808000',\n                            '#00FF00',\n                            '#008000',\n                            '#808080',\n                            '#0000FF',\n                            '#000080',\n                            '#FF00FF',\n                            '#800080',\n                          ],\n                          data: Object.values(extrasAllDep).map((x) => x.length),\n                        },\n                      ],\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n            </CCol>\n          </CRow>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default Extras\n"],"sourceRoot":""}