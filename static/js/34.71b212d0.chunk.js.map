{"version":3,"sources":["views/extras/Extras.js"],"names":["GRAPHQL_ENDPOINT","GRAPHQL_SUBSCRIPTIONS","SECRET_KEY","AUTH_JWT","db","getDatabase","Extras","mode","setMode","useState","extras24","setExtras24","extras24Cat","setExtras24Cat","extras24Job","setExtras24Job","extrasSemaine","setExtrasSemaine","extrasSemaineCat","setExtrasSemaineCat","extrasSemaineJob","setExtrasSemaineJob","extrasMois","setExtrasMois","extrasMoisCat","setExtrasMoisCat","extrasMoisJob","setExtrasMoisJob","extrasAll","setExtrasAll","extrasAllCat","setExtrasAllCat","extrasAllJob","setExtrasAllJob","loading","setLoading","useEffect","client","createApolloClient","async","extrasData","query","gql","data","extra","objExtras","forEach","element","id","job","then","result","usersInWork","user","today","Date","yesterday","setDate","getDate","oneWeekAgo","oneMonthAgo","usersListRef","ref","onValue","snapshot","val","firebase24","filter","x","metadata","creationTime","getTime","firebaseSemaine","firebaseMois","firebaseAll","firebaseUsers24","map","uid","usersInWork24","includes","company","firebaseUsersSemaine","usersInWorkSemaine","firebaseUsersMois","usersInWorkMois","firebaseUsersAll","usersInWorkAll","idExtra","groupByCategory24","reduce","group","product","category","push","groupByCategorySemaine","groupByCategoryMois","groupByCategoryAll","groupByJob24","groupByJobSemaine","groupByJobMois","groupByJobAll","setTimeout","fetchData","httpLink","HttpLink","uri","headers","Authorization","wsLink","WebSocketLink","options","reconnect","splitLink","split","definition","getMainDefinition","kind","operation","ApolloClient","link","cache","InMemoryCache","className","xs","height","width","color","ariaLabel","variant","onClick","active","style","cursor","length","labels","Object","keys","datasets","backgroundColor","values"],"mappings":"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","file":"static/js/34.71b212d0.chunk.js","sourcesContent":["import React, { lazy, useEffect, useState } from 'react'\nimport { ApolloClient, InMemoryCache, HttpLink, split, gql } from '@apollo/client'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { WebSocketLink } from '@apollo/client/link/ws'\nimport { TailSpin } from 'react-loader-spinner'\n\nimport { CNav, CNavItem, CNavLink, CCol, CCard, CCardHeader, CCardBody, CRow } from '@coreui/react'\nimport { CChartDoughnut } from '@coreui/react-chartjs'\n\nimport { getDatabase, ref, onValue } from 'firebase/database'\n\nexport const GRAPHQL_ENDPOINT = 'https://unextra.hasura.app/v1/graphql'\nexport const GRAPHQL_SUBSCRIPTIONS = 'wss://unextra.hasura.app/v1/graphql'\nexport const SECRET_KEY = '2tGF4WeLMIOsP/Q/h/VS2cd++EmJzMcb'\nexport const AUTH_JWT =\n  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiYW5vbnltb3VzIl0sIngtaGFzdXJhLWRlZmF1bHQtcm9sZSI6ImFub255bW91cyJ9fQ.HM2vL95bDWL2xTMwCXXDatxlfLMd_8-Mx1ymyMiCKb4'\n\nconst db = getDatabase()\n\nconst WidgetsDropdown = lazy(() => import('../widgets/WidgetsDropdown.js'))\nconst WidgetsBrand = lazy(() => import('../widgets/WidgetsBrand.js'))\n\nconst Extras = () => {\n  const [mode, setMode] = useState(0)\n  const [extras24, setExtras24] = useState([])\n  const [extras24Cat, setExtras24Cat] = useState([])\n  const [extras24Job, setExtras24Job] = useState([])\n  const [extrasSemaine, setExtrasSemaine] = useState([])\n  const [extrasSemaineCat, setExtrasSemaineCat] = useState([])\n  const [extrasSemaineJob, setExtrasSemaineJob] = useState([])\n  const [extrasMois, setExtrasMois] = useState([])\n  const [extrasMoisCat, setExtrasMoisCat] = useState([])\n  const [extrasMoisJob, setExtrasMoisJob] = useState([])\n  const [extrasAll, setExtrasAll] = useState([])\n  const [extrasAllCat, setExtrasAllCat] = useState([])\n  const [extrasAllJob, setExtrasAllJob] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const client = createApolloClient()\n    async function fetchData() {\n      const extras = await client.query({\n        query: gql`\n          query {\n            extra(limit: 100000) {\n              id\n              job\n            }\n          }\n        `,\n      })\n\n      const extrasData = extras.data.extra\n\n      const objExtras = {}\n\n      extrasData.forEach((element) => {\n        objExtras[element.id] = element.job\n      })\n\n      client\n        .query({\n          query: gql`\n            query {\n              user(limit: 100000) {\n                id\n                idExtra\n                category\n                gender\n                company {\n                  id\n                  latitude\n                }\n              }\n            }\n          `,\n        })\n        .then((result) => {\n          const usersInWork = result.data.user\n          const today = new Date()\n          const yesterday = new Date()\n          yesterday.setDate(yesterday.getDate() - 1)\n          const oneWeekAgo = new Date()\n          const oneMonthAgo = new Date()\n          oneWeekAgo.setDate(oneWeekAgo.getDate() - 8)\n          oneMonthAgo.setDate(oneMonthAgo.getDate() - 31)\n          const usersListRef = ref(db, 'usersList')\n          onValue(usersListRef, (snapshot) => {\n            const data = snapshot.val()\n            const firebase24 = data.filter((x) => {\n              return new Date(x.metadata.creationTime).getTime() > yesterday.getTime()\n            })\n            const firebaseSemaine = data.filter((x) => {\n              return (\n                new Date(x.metadata.creationTime).getTime() < today.getTime() &&\n                new Date(x.metadata.creationTime).getTime() > oneWeekAgo.getTime()\n              )\n            })\n            const firebaseMois = data.filter((x) => {\n              return (\n                new Date(x.metadata.creationTime).getTime() < today.getTime() &&\n                new Date(x.metadata.creationTime).getTime() > oneMonthAgo.getTime()\n              )\n            })\n            const firebaseAll = data.filter((x) => {\n              return new Date(x.metadata.creationTime).getTime() < today.getTime()\n            })\n            const firebaseUsers24 = firebase24.map((x) => x.uid)\n            let usersInWork24 = usersInWork.filter((x) => {\n              return firebaseUsers24.includes(x.id) && x.company == null\n            })\n            const firebaseUsersSemaine = firebaseSemaine.map((x) => x.uid)\n            let usersInWorkSemaine = usersInWork.filter((x) => {\n              return firebaseUsersSemaine.includes(x.id) && x.company == null\n            })\n            const firebaseUsersMois = firebaseMois.map((x) => x.uid)\n            let usersInWorkMois = usersInWork.filter((x) => {\n              return firebaseUsersMois.includes(x.id) && x.company == null\n            })\n            const firebaseUsersAll = firebaseAll.map((x) => x.uid)\n            let usersInWorkAll = usersInWork.filter((x) => {\n              return firebaseUsersAll.includes(x.id) && x.company == null\n            })\n            usersInWork24 = usersInWork24.map((x) => ({ ...x, job: objExtras[x.idExtra] }))\n            usersInWorkSemaine = usersInWorkSemaine.map((x) => ({\n              ...x,\n              job: objExtras[x.idExtra],\n            }))\n            usersInWorkMois = usersInWorkMois.map((x) => ({\n              ...x,\n              job: objExtras[x.idExtra],\n            }))\n            usersInWorkAll = usersInWorkAll.map((x) => ({\n              ...x,\n              job: objExtras[x.idExtra],\n            }))\n            setExtras24(usersInWork24)\n            setExtrasSemaine(usersInWorkSemaine)\n            setExtrasMois(usersInWorkMois)\n            setExtrasAll(usersInWorkAll)\n            const groupByCategory24 = usersInWork24.reduce((group, product) => {\n              const { category } = product\n              group[category] = group[category] ?? []\n              group[category].push(product)\n              return group\n            }, {})\n            const groupByCategorySemaine = usersInWorkSemaine.reduce((group, product) => {\n              const { category } = product\n              group[category] = group[category] ?? []\n              group[category].push(product)\n              return group\n            }, {})\n            const groupByCategoryMois = usersInWorkMois.reduce((group, product) => {\n              const { category } = product\n              group[category] = group[category] ?? []\n              group[category].push(product)\n              return group\n            }, {})\n            const groupByCategoryAll = usersInWorkAll.reduce((group, product) => {\n              const { category } = product\n              group[category] = group[category] ?? []\n              group[category].push(product)\n              return group\n            }, {})\n            const groupByJob24 = usersInWork24.reduce((group, product) => {\n              const { job } = product\n              group[job] = group[job] ?? []\n              group[job].push(product)\n              return group\n            }, {})\n            const groupByJobSemaine = usersInWorkSemaine.reduce((group, product) => {\n              const { job } = product\n              group[job] = group[job] ?? []\n              group[job].push(product)\n              return group\n            }, {})\n            const groupByJobMois = usersInWorkMois.reduce((group, product) => {\n              const { job } = product\n              group[job] = group[job] ?? []\n              group[job].push(product)\n              return group\n            }, {})\n            const groupByJobAll = usersInWorkAll.reduce((group, product) => {\n              const { job } = product\n              group[job] = group[job] ?? []\n              group[job].push(product)\n              return group\n            }, {})\n            setExtras24Job(groupByJob24)\n            setExtras24Cat(groupByCategory24)\n            setExtrasSemaineJob(groupByJobSemaine)\n            setExtrasSemaineCat(groupByCategorySemaine)\n            setExtrasMoisJob(groupByJobMois)\n            setExtrasMoisCat(groupByCategoryMois)\n            setExtrasAllJob(groupByJobAll)\n            setExtrasAllCat(groupByCategoryAll)\n          })\n        })\n      setTimeout(() => {\n        setLoading(false)\n      }, 1000)\n    }\n    fetchData()\n  }, [])\n  const random = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n  }\n\n  const createApolloClient = () => {\n    const httpLink = new HttpLink({\n      uri: GRAPHQL_ENDPOINT,\n      headers: {\n        Authorization: `Bearer ${AUTH_JWT}`,\n      },\n    })\n\n    const wsLink = new WebSocketLink({\n      uri: GRAPHQL_SUBSCRIPTIONS,\n      headers: {\n        Authorization: `Bearer ${AUTH_JWT}`,\n      },\n      options: {\n        reconnect: true,\n      },\n    })\n\n    const splitLink = split(\n      ({ query }) => {\n        const definition = getMainDefinition(query)\n        return definition.kind === 'OperationDefinition' && definition.operation === 'subscription'\n      },\n      wsLink,\n      httpLink,\n    )\n\n    return new ApolloClient({\n      link: splitLink,\n      cache: new InMemoryCache(),\n    })\n  }\n\n  return loading ? (\n    <CRow className=\"justify-content-center\">\n      <CCol className=\"p-4\" xs={6}>\n        <TailSpin height=\"100\" width=\"100\" color=\"grey\" ariaLabel=\"loading\" />\n      </CCol>\n    </CRow>\n  ) : (\n    <>\n      <CNav variant=\"tabs\">\n        <CNavItem>\n          <CNavLink\n            onClick={() => setMode(0)}\n            active={mode == 0 ? true : false}\n            style={{ cursor: 'pointer', color: mode == 0 ? '#2500D2' : 'black' }}\n          >\n            Dernieres 24h\n          </CNavLink>\n        </CNavItem>\n        <CNavItem>\n          <CNavLink\n            onClick={() => setMode(1)}\n            active={mode == 1 ? true : false}\n            style={{ cursor: 'pointer', color: mode == 1 ? '#2500D2' : 'black' }}\n          >\n            Semaine\n          </CNavLink>\n        </CNavItem>\n        <CNavItem>\n          <CNavLink\n            onClick={() => setMode(2)}\n            active={mode == 2 ? true : false}\n            style={{ cursor: 'pointer', color: mode == 2 ? '#2500D2' : 'black' }}\n          >\n            Mois\n          </CNavLink>\n        </CNavItem>\n        <CNavItem>\n          <CNavLink\n            onClick={() => setMode(3)}\n            active={mode == 3 ? true : false}\n            style={{ cursor: 'pointer', color: mode == 3 ? '#2500D2' : 'black' }}\n          >\n            Total\n          </CNavLink>\n        </CNavItem>\n      </CNav>\n      {mode == 0 && (\n        <>\n          <CRow>\n            <CCol xs={6}>\n              <div className=\"mt-4\">Nombre extras inscrits : {extras24.length}</div>\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol xs={6}>\n              <CCard className=\"mb-4 mt-4\">\n                <CCardHeader>Extras inscrits par catégorie</CCardHeader>\n                <CCardBody>\n                  <CChartDoughnut\n                    data={{\n                      labels: Object.keys(extras24Cat),\n                      datasets: [\n                        {\n                          backgroundColor: [\n                            '#41B883',\n                            '#E46651',\n                            '#00D8FF',\n                            '#DD1B16',\n                            '#FF0000',\n                            '#800000',\n                            '#808000',\n                            '#00FF00',\n                            '#008000',\n                            '#808080',\n                            '#0000FF',\n                            '#000080',\n                            '#FF00FF',\n                            '#800080',\n                          ],\n                          data: Object.values(extras24Cat).map((x) => x.length),\n                        },\n                      ],\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n            </CCol>\n            <CCol xs={6}>\n              <CCard className=\"mb-4 mt-4\">\n                <CCardHeader>Extras inscrits par job</CCardHeader>\n                <CCardBody>\n                  <CChartDoughnut\n                    data={{\n                      labels: Object.keys(extras24Job),\n                      datasets: [\n                        {\n                          backgroundColor: [\n                            '#41B883',\n                            '#E46651',\n                            '#00D8FF',\n                            '#DD1B16',\n                            '#FF0000',\n                            '#800000',\n                            '#808000',\n                            '#00FF00',\n                            '#008000',\n                            '#808080',\n                            '#0000FF',\n                            '#000080',\n                            '#FF00FF',\n                            '#800080',\n                          ],\n                          data: Object.values(extras24Job).map((x) => x.length),\n                        },\n                      ],\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n            </CCol>\n          </CRow>\n        </>\n      )}\n      {mode == 1 && (\n        <>\n          <CRow>\n            <CCol xs={6}>\n              <div className=\"mt-4\">Nombre extras inscrits : {extrasSemaine.length}</div>\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol xs={6}>\n              <CCard className=\"mb-4 mt-4\">\n                <CCardHeader>Extras inscrits par catégorie</CCardHeader>\n                <CCardBody>\n                  <CChartDoughnut\n                    data={{\n                      labels: Object.keys(extrasSemaineCat),\n                      datasets: [\n                        {\n                          backgroundColor: [\n                            '#41B883',\n                            '#E46651',\n                            '#00D8FF',\n                            '#DD1B16',\n                            '#FF0000',\n                            '#800000',\n                            '#808000',\n                            '#00FF00',\n                            '#008000',\n                            '#808080',\n                            '#0000FF',\n                            '#000080',\n                            '#FF00FF',\n                            '#800080',\n                          ],\n                          data: Object.values(extrasSemaineCat).map((x) => x.length),\n                        },\n                      ],\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n            </CCol>\n            <CCol xs={6}>\n              <CCard className=\"mb-4 mt-4\">\n                <CCardHeader>Extras inscrits par job</CCardHeader>\n                <CCardBody>\n                  <CChartDoughnut\n                    data={{\n                      labels: Object.keys(extrasSemaineJob),\n                      datasets: [\n                        {\n                          backgroundColor: [\n                            '#41B883',\n                            '#E46651',\n                            '#00D8FF',\n                            '#DD1B16',\n                            '#FF0000',\n                            '#800000',\n                            '#808000',\n                            '#00FF00',\n                            '#008000',\n                            '#808080',\n                            '#0000FF',\n                            '#000080',\n                            '#FF00FF',\n                            '#800080',\n                          ],\n                          data: Object.values(extrasSemaineJob).map((x) => x.length),\n                        },\n                      ],\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n            </CCol>\n          </CRow>\n        </>\n      )}\n      {mode == 2 && (\n        <>\n          <CRow>\n            <CCol xs={6}>\n              <div className=\"mt-4\">Nombre extras inscrits : {extrasMois.length}</div>\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol xs={6}>\n              <CCard className=\"mb-4 mt-4\">\n                <CCardHeader>Extras inscrits par catégorie</CCardHeader>\n                <CCardBody>\n                  <CChartDoughnut\n                    data={{\n                      labels: Object.keys(extrasMoisCat),\n                      datasets: [\n                        {\n                          backgroundColor: [\n                            '#41B883',\n                            '#E46651',\n                            '#00D8FF',\n                            '#DD1B16',\n                            '#FF0000',\n                            '#800000',\n                            '#808000',\n                            '#00FF00',\n                            '#008000',\n                            '#808080',\n                            '#0000FF',\n                            '#000080',\n                            '#FF00FF',\n                            '#800080',\n                          ],\n                          data: Object.values(extrasMoisCat).map((x) => x.length),\n                        },\n                      ],\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n            </CCol>\n            <CCol xs={6}>\n              <CCard className=\"mb-4 mt-4\">\n                <CCardHeader>Extras inscrits par job</CCardHeader>\n                <CCardBody>\n                  <CChartDoughnut\n                    data={{\n                      labels: Object.keys(extrasMoisJob),\n                      datasets: [\n                        {\n                          backgroundColor: [\n                            '#41B883',\n                            '#E46651',\n                            '#00D8FF',\n                            '#DD1B16',\n                            '#FF0000',\n                            '#800000',\n                            '#808000',\n                            '#00FF00',\n                            '#008000',\n                            '#808080',\n                            '#0000FF',\n                            '#000080',\n                            '#FF00FF',\n                            '#800080',\n                          ],\n                          data: Object.values(extrasMoisJob).map((x) => x.length),\n                        },\n                      ],\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n            </CCol>\n          </CRow>\n        </>\n      )}\n      {mode == 3 && (\n        <>\n          <CRow>\n            <CCol xs={6}>\n              <div className=\"mt-4\">Nombre extras inscrits : {extrasAll.length}</div>\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol xs={6}>\n              <CCard className=\"mb-4 mt-4\">\n                <CCardHeader>Extras inscrits par catégorie</CCardHeader>\n                <CCardBody>\n                  <CChartDoughnut\n                    data={{\n                      labels: Object.keys(extrasAllCat),\n                      datasets: [\n                        {\n                          backgroundColor: [\n                            '#41B883',\n                            '#E46651',\n                            '#00D8FF',\n                            '#DD1B16',\n                            '#FF0000',\n                            '#800000',\n                            '#808000',\n                            '#00FF00',\n                            '#008000',\n                            '#808080',\n                            '#0000FF',\n                            '#000080',\n                            '#FF00FF',\n                            '#800080',\n                          ],\n                          data: Object.values(extrasAllCat).map((x) => x.length),\n                        },\n                      ],\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n            </CCol>\n            <CCol xs={6}>\n              <CCard className=\"mb-4 mt-4\">\n                <CCardHeader>Extras inscrits par job</CCardHeader>\n                <CCardBody>\n                  <CChartDoughnut\n                    data={{\n                      labels: Object.keys(extrasAllJob),\n                      datasets: [\n                        {\n                          backgroundColor: [\n                            '#41B883',\n                            '#E46651',\n                            '#00D8FF',\n                            '#DD1B16',\n                            '#FF0000',\n                            '#800000',\n                            '#808000',\n                            '#00FF00',\n                            '#008000',\n                            '#808080',\n                            '#0000FF',\n                            '#000080',\n                            '#FF00FF',\n                            '#800080',\n                          ],\n                          data: Object.values(extrasAllJob).map((x) => x.length),\n                        },\n                      ],\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n            </CCol>\n          </CRow>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default Extras\n"],"sourceRoot":""}