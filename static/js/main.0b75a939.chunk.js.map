{"version":3,"sources":["App.js","serviceWorker.js","store.js","index.js"],"names":["loading","className","DefaultLayout","React","lazy","Login","Register","Page404","Page500","App","Component","render","Suspense","fallback","exact","path","name","props","Boolean","window","location","hostname","match","initialState","sidebarShow","store","createStore","state","type","rest","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","GRAPHQL_ENDPOINT","GRAPHQL_SUBSCRIPTIONS","SECRET_KEY","AUTH_JWT","getDatabase","httpLink","HttpLink","uri","headers","Authorization","wsLink","WebSocketLink","options","reconnect","splitLink","split","query","definition","getMainDefinition","kind","operation","ApolloClient","link","cache","InMemoryCache","createApolloClient","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oxCAKA,MAAMA,EACJ,qBAAKC,UAAU,mBAAf,SACE,qBAAKA,UAAU,kCAKbC,EAAgBC,IAAMC,MAAK,IAAM,8DAGjCC,EAAQF,IAAMC,MAAK,IAAM,wDACzBE,EAAWH,IAAMC,MAAK,IAAM,wDAC5BG,EAAUJ,IAAMC,MAAK,IAAM,wDAC3BI,EAAUL,IAAMC,MAAK,IAAM,wDAEjC,MAAMK,UAAYC,YAChBC,SACE,OACE,cAAC,IAAD,UACE,cAAC,IAAMC,SAAP,CAAgBC,SAAUb,EAA1B,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,SAASC,KAAK,aAAaL,OAASM,GAAU,cAACZ,EAAD,IAAWY,MAC3E,cAAC,IAAD,CACEH,OAAK,EACLC,KAAK,YACLC,KAAK,gBACLL,OAASM,GAAU,cAACX,EAAD,IAAcW,MAEnC,cAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,OAAOC,KAAK,WAAWL,OAASM,GAAU,cAACV,EAAD,IAAaU,MACzE,cAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,OAAOC,KAAK,WAAWL,OAASM,GAAU,cAACT,EAAD,IAAaS,MACzE,cAAC,IAAD,CAAOF,KAAK,IAAIC,KAAK,OAAOL,OAASM,GAAU,cAACf,EAAD,IAAmBe,cAQ/DR,QCjCKS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,sBCbnC,MAAMC,EAAe,CACnBC,aAAa,GAYTC,EAAQC,aATM,WAA8C,IAA7CC,EAA4C,uDAApCJ,GAAc,KAAEK,KAASC,GAAW,uCAC/D,MACO,QADCD,EAEG,IAAKD,KAAUE,GAEfF,KAKEF,Q,uECMf,MAWMK,EAAMC,YAXW,CACrBC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sEACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKJC,EAAmB,wCACnBC,EAAwB,sCACxBC,EAAa,mCACbC,EACX,sOAEeC,YAAYd,GAEF,MACzB,MAAMe,EAAW,IAAIC,IAAS,CAC5BC,IAAKP,EACLQ,QAAS,CACPC,cAAc,UAAD,OAAYN,MAIvBO,EAAS,IAAIC,IAAc,CAC/BJ,IAAKN,EACLO,QAAS,CACPC,cAAc,UAAD,OAAYN,IAE3BS,QAAS,CACPC,WAAW,KAITC,EAAYC,aAChB,IAAgB,IAAf,MAAEC,GAAY,EACb,MAAMC,EAAaC,YAAkBF,GACrC,MAA2B,wBAApBC,EAAWE,MAA2D,iBAAzBF,EAAWG,YAEjEV,EACAL,GAGK,IAAIgB,IAAa,CACtBC,KAAMR,EACNS,MAAO,IAAIC,OAIAC,GAEfC,IAASvD,OACP,cAAC,IAAD,CAAUc,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEF0C,SAASC,eAAe,SFmCpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAMC,IAClCA,EAAaC,kB","file":"static/js/main.0b75a939.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\nimport './scss/style.scss'\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css'\n\nconst loading = (\n  <div className=\"pt-3 text-center\">\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\n  </div>\n)\n\n// Containers\nconst DefaultLayout = React.lazy(() => import('./layout/DefaultLayout'))\n\n// Pages\nconst Login = React.lazy(() => import('./views/pages/login/Login'))\nconst Register = React.lazy(() => import('./views/pages/register/Register'))\nconst Page404 = React.lazy(() => import('./views/pages/page404/Page404'))\nconst Page500 = React.lazy(() => import('./views/pages/page500/Page500'))\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <React.Suspense fallback={loading}>\n          <Switch>\n            <Route exact path=\"/login\" name=\"Login Page\" render={(props) => <Login {...props} />} />\n            <Route\n              exact\n              path=\"/register\"\n              name=\"Register Page\"\n              render={(props) => <Register {...props} />}\n            />\n            <Route exact path=\"/404\" name=\"Page 404\" render={(props) => <Page404 {...props} />} />\n            <Route exact path=\"/500\" name=\"Page 500\" render={(props) => <Page500 {...props} />} />\n            <Route path=\"/\" name=\"Home\" render={(props) => <DefaultLayout {...props} />} />\n          </Switch>\n        </React.Suspense>\n      </HashRouter>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import { createStore } from 'redux'\n\nconst initialState = {\n  sidebarShow: true,\n}\n\nconst changeState = (state = initialState, { type, ...rest }) => {\n  switch (type) {\n    case 'set':\n      return { ...state, ...rest }\n    default:\n      return state\n  }\n}\n\nconst store = createStore(changeState)\nexport default store\n","import 'react-app-polyfill/stable'\nimport 'core-js'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport {\n  ApolloClient,\n  ApolloProvider,\n  InMemoryCache,\n  HttpLink,\n  split,\n  useQuery,\n  gql,\n} from '@apollo/client'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { WebSocketLink } from '@apollo/client/link/ws'\nimport { initializeApp } from 'firebase/app'\nimport { getDatabase } from 'firebase/database'\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyBpl62VOwT6totZxn3LPHrnt4JhG3xjWdI',\n  authDomain: 'unextra-prod.firebaseapp.com',\n  databaseURL: 'https://unextra-prod-default-rtdb.europe-west1.firebasedatabase.app',\n  projectId: 'unextra-prod',\n  storageBucket: 'unextra-prod.appspot.com',\n  messagingSenderId: '705321915257',\n  appId: '1:705321915257:web:dfa27120f912c0a40e15a8',\n  measurementId: 'G-9L9NKZV52Y',\n}\n\nconst app = initializeApp(firebaseConfig)\n\nexport const GRAPHQL_ENDPOINT = 'https://unextra.hasura.app/v1/graphql'\nexport const GRAPHQL_SUBSCRIPTIONS = 'wss://unextra.hasura.app/v1/graphql'\nexport const SECRET_KEY = '2tGF4WeLMIOsP/Q/h/VS2cd++EmJzMcb'\nexport const AUTH_JWT =\n  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiYW5vbnltb3VzIl0sIngtaGFzdXJhLWRlZmF1bHQtcm9sZSI6ImFub255bW91cyJ9fQ.HM2vL95bDWL2xTMwCXXDatxlfLMd_8-Mx1ymyMiCKb4'\n\nconst database = getDatabase(app)\n\nconst createApolloClient = () => {\n  const httpLink = new HttpLink({\n    uri: GRAPHQL_ENDPOINT,\n    headers: {\n      Authorization: `Bearer ${AUTH_JWT}`,\n    },\n  })\n\n  const wsLink = new WebSocketLink({\n    uri: GRAPHQL_SUBSCRIPTIONS,\n    headers: {\n      Authorization: `Bearer ${AUTH_JWT}`,\n    },\n    options: {\n      reconnect: true,\n    },\n  })\n\n  const splitLink = split(\n    ({ query }) => {\n      const definition = getMainDefinition(query)\n      return definition.kind === 'OperationDefinition' && definition.operation === 'subscription'\n    },\n    wsLink,\n    httpLink,\n  )\n\n  return new ApolloClient({\n    link: splitLink,\n    cache: new InMemoryCache(),\n  })\n}\n\nconst client = createApolloClient()\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}